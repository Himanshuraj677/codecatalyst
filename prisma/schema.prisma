// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  role       Role      @default(user)
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  courses    Course[]     @relation("TeacherCourses")
  enrollment Enrollment[]
  problem    Problem[]
  submission Submission[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum Role {
  user
  teacher
  moderator
  admin
}

enum ProblemDifficulty {
  Easy
  Medium
  Hard
}

enum SubmissionStatus {
  Accepted
  WrongAnswer
  TimeLimitExceeded
  RuntimeError
  Pending
  CompilationError
  Plagarized
}

model Course {
  id           String   @id @default(cuid())
  name         String
  description  String
  instructorId String
  instructor   User     @relation("TeacherCourses", fields: [instructorId], references: [id])
  joinCode     String
  createdAt    DateTime @default(now())

  enrollments Enrollment[]
  assignment  Assignment[]

  @@unique([joinCode])
}

model Enrollment {
  id        String @id @default(cuid())
  studentId String
  courseId  String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course @relation(fields: [courseId], references: [id])

  @@unique([courseId, studentId])
}

model Problem {
  id                        String              @id @default(cuid())
  title                     String
  description               String
  difficulty                ProblemDifficulty
  tags                      String[]
  timeLimit                 Int
  memoryLimit               Int
  constraints               String[]
  categoryId                String
  category                  ProblemCategory     @relation(fields: [categoryId], references: [id])
  createdById               String
  createdAt                 DateTime            @default(now())
  teacherSolution           String
  teacherSolutionLanguageId Int
  createdBy                 User                @relation(fields: [createdById], references: [id])
  assignment                AssignmentProblem[]
  submission                Submission[]
  testCases                 TestCase[]

  @@index([createdById])
  @@index([categoryId])
}

model TestCase {
  id             String  @id @default(cuid())
  problemId      String
  input          String
  expectedOutput String
  isHidden       Boolean @default(false)

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  courseId    String
  dueDate     DateTime
  maxAttempt  Int
  createdAt   DateTime @default(now())

  course      Course              @relation(fields: [courseId], references: [id])
  problem     AssignmentProblem[]
  submissions Submission[]
}

model AssignmentProblem {
  id           String @id @default(cuid())
  problemId    String
  assignmentId String

  problem    Problem    @relation(fields: [problemId], references: [id])
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([problemId, assignmentId])
}

model Submission {
  id              String           @id @default(cuid())
  problemId       String
  assignmentId    String?
  studentId       String
  language        String
  code            String
  status          SubmissionStatus @default(Pending)
  score           Int?
  feedback        String?
  testCasesPassed Int?
  totalTestCases  Int?
  executionTime   Float?
  memoryUsed      Float?
  plagiarismScore Float?
  plagiarizedFrom String?
  judge0Token     String?
  judge0Tokens    Json?
  judge0Result    Json?
  submittedAt     DateTime         @default(now())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt

  student    User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  problem    Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model ProblemCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  problems Problem[]
}
